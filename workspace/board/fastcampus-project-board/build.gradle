plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.8'
    id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

ext {
    serviceName = 'fastcapus-project-board'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

print(dependencyManagement)

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'com.h2database:h2'

    //runtimeOnly 'mysql:mysql-connector-java'
    implementation 'com.mysql:mysql-connector-j'

    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    //spring data rest
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.data:spring-data-rest-hal-explorer'
    // data rest를 편하게 화면으로 볼 수 있도록 도와주는 라이브러리

    /**
     * querydsl 관련 설정
     * */
    // querydsl-jpa와 querydsl-core 반드시 필요
    implementation ("com.querydsl:querydsl-jpa:${dependencyManagement.importedProperties['querydsl.version']}:jakarta")
    implementation("com.querydsl:querydsl-core")
    // querydsl 관련한 추가적인 기능을 제공하여 주는 라이브러리
    // implementation("com.querydsl:querydsl-collections")
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
//    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    // compileJava를 실시하면 java.lang.NoClassDefFoundError: jakarta/persistence/Entity 에러가 발생하는데
    // 위의 에러를 없애주기 위해 해당 annotationProcessor를 추가

    // 사용자가 커스텀한 프로퍼티들의 설정을 더욱 편리하게 도와주는 라이브러리
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")

    /**
     * 템플릿 엔진 관련
     * */
    implementation("org.springframework.boot:spring-boot-starter-thymeleaf")

    /*
    * 스프링 시큐리티 관련
    * */
    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'

}


// Querydsl QClass 파일 생성 위치를 지정
// 기존에 이미 파일
def generated = 'src/main/generated'

// javaCompile 과정에서 source output 폴더의 경로를 변경하여줌
tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// java source set 에 querydsl QClass 위치 추가
sourceSets {
    main.java.srcDirs += [ generated ]
}

// gradle clean 시에 QClass 위치 추가
clean {
    // clean 실행 시에 기존에 생성되어 있던 Q클래스 파일들 삭제
    // src/main/generated -> Q클래스 파일들이 생성되어 있는 경로
    delete file("src/main/generated")
}

task serviceName() {
    doLast {
        print("------- 서비스명 : " +serviceName + "-------")
    }
}
tasks.named('test') {
    useJUnitPlatform()
}

